Description: >
  Triggered By Torque (Blueprint: spec1-in-spec2, Owner: ophir.h@quali.com) - A
  Java Spring website deployed on a TomCat server and MySQL database
Resources:
  AppSubnet0:
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: app-subnet-0
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  AppSubnet0RouteAssociation:
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref AppSubnet0
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  AppSubnet1:
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: app-subnet-1
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  AppSubnet1RouteAssociation:
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref AppSubnet1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  DNS:
    Properties:
      HostedZoneConfig:
        Comment: 'hosted zone for sandbox: 2rocayktk402c2'
      Name: 2rocayktk402c2.sandbox.com
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref 'AWS::Region'
    Type: 'AWS::Route53::HostedZone'
  DNSRecordjavaspringwebsite:
    Properties:
      Comment: 'DNS name for instance: java-spring-website.'
      HostedZoneId: !Ref DNS
      Name: java-spring-website.2rocayktk402c2.sandbox.com
      ResourceRecords:
        - !GetAtt 
          - javaspringwebsiteNic
          - PrimaryPrivateIpAddress
      TTL: 20
      Type: A
    Type: 'AWS::Route53::RecordSet'
  DNSRecordtorqueSidecar:
    Properties:
      Comment: 'DNS name for instance: torqueSidecar.'
      HostedZoneId: !Ref DNS
      Name: torqueSidecar.2rocayktk402c2.sandbox.com
      ResourceRecords:
        - !GetAtt 
          - torqueSidecarNic
          - PrimaryPrivateIpAddress
      TTL: 20
      Type: A
    Type: 'AWS::Route53::RecordSet'
  DefaultSandboxSG:
    Properties:
      GroupDescription: >-
        Simply attaching the empty security group(DefaultSandboxSG) to an
        instance gives that instance permission to connect other instances
      Tags:
        - Key: Name
          Value: sandbox default security group
      VpcId: !Ref VPC
    Type: 'AWS::EC2::SecurityGroup'
  EmptyTG:
    Properties:
      Name: TG2rocayktk402c2Empty
      Port: 1
      Protocol: HTTP
      VpcId: !Ref VPC
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: internet-gateway
    Type: 'AWS::EC2::InternetGateway'
  MngSubnet:
    Properties:
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: mng-subnet
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  MngSubnetRouteAssociation:
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MngSubnet
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  PublicRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: public-route-table
      VpcId: !Ref VPC
    Type: 'AWS::EC2::RouteTable'
  RouteToInternet:
    DependsOn: VpcInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    Type: 'AWS::EC2::Route'
  VPC:
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: vpc
    Type: 'AWS::EC2::VPC'
  VpcInternetGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Type: 'AWS::EC2::VPCGatewayAttachment'
  javaspringwebsite:
    DependsOn:
      - DNSRecordjavaspringwebsite
      - DNSRecordtorqueSidecar
    Properties:
      ImageId: ami-f90a4880
      InstanceType: t2.nano
      KeyName: keypair-2rocayktk402c2
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref javaspringwebsiteNic
      Tags:
        - Key: Name
          Value: java-spring-website
        - Key: torque-app-name
          Value: java-spring-website
        - Key: torque-instance-logical-id
          Value: bb82aa4b9ead4ddd813ed72cd2340616
    Type: 'AWS::EC2::Instance'
  javaspringwebsiteNic:
    Properties:
      GroupSet:
        - !Ref javaspringwebsiteSG
        - !Ref DefaultSandboxSG
      SubnetId: !Ref AppSubnet0
    Type: 'AWS::EC2::NetworkInterface'
  javaspringwebsiteSG:
    Properties:
      GroupDescription: java-spring-website Security Group
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - IpProtocol: '-1'
          SourceSecurityGroupId: !Ref torqueSidecarSG
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref torqueDebugServiceSG
          ToPort: 22
        - FromPort: 3389
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref torqueDebugServiceSG
          ToPort: 3389
        - IpProtocol: '-1'
          SourceSecurityGroupId: !Ref DefaultSandboxSG
      VpcId: !Ref VPC
    Type: 'AWS::EC2::SecurityGroup'
  sidecarInstanceProfile:
    Properties:
      InstanceProfileName: torque-sandbox-sidecar-role-2rocayktk402c2
      Path: /torque/1ba6c10d-fac8-48d5-97c3-8b14a20a50ba/sandbox/2rocayktk402c2/
      Roles:
        - !Ref sidecarRole
    Type: 'AWS::IAM::InstanceProfile'
  sidecarRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /torque/1ba6c10d-fac8-48d5-97c3-8b14a20a50ba/sandbox/2rocayktk402c2/
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Condition:
                  'ForAllValues:StringEquals':
                    'dynamodb:LeadingKeys': 2rocayktk402c2
                Effect: Allow
                Resource:
                  - >-
                    arn:aws:dynamodb:*:*:table/torque-sandboxes-datatable-1ba6c10d-fac8-48d5-97c3-8b14a20a50ba
                  - 'arn:aws:dynamodb:*:*:table/torque-sandboxes-datatable'
            Version: 2012-10-17
          PolicyName: TorqueSandboxDynamoDBAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:Get*'
                  - 's3:List*'
                  - 's3:Put*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::torque-1ba6c10d-fac8-48d5-97c3-8b14a20a50ba'
                  - 'arn:aws:s3:::torque-1ba6c10d-fac8-48d5-97c3-8b14a20a50ba/*'
            Version: 2012-10-17
          PolicyName: TorqueSandboxS3Access
      RoleName: torque-sandbox-sidecar-role-2rocayktk402c2
    Type: 'AWS::IAM::Role'
  torqueDebugService:
    Properties:
      IamInstanceProfile: torque-instance-profile-1ba6c10d-fac8-48d5-97c3-8b14a20a50ba
      ImageId: ami-047b1aebadba72929
      InstanceType: t3.medium
      KeyName: keypair-2rocayktk402c2
      SecurityGroupIds:
        - !Ref torqueDebugServiceSG
      SubnetId: !Ref MngSubnet
      Tags:
        - Key: Name
          Value: torqueDebugService
        - Key: torque-app-name
          Value: torqueDebugService
    Type: 'AWS::EC2::Instance'
  torqueDebugServiceSG:
    Properties:
      GroupDescription: torqueDebugService Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: public port access
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId: !Ref VPC
    Type: 'AWS::EC2::SecurityGroup'
  torqueSidecar:
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            Encrypted: 'false'
            VolumeSize: 18
      IamInstanceProfile: !Ref sidecarInstanceProfile
      ImageId: ami-06453e321410d9a3d
      InstanceType: t3.medium
      KeyName: keypair-2rocayktk402c2
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref torqueSidecarNic
      Tags:
        - Key: Name
          Value: torqueSidecar
        - Key: torque-app-name
          Value: torqueSidecar
    Type: 'AWS::EC2::Instance'
  torqueSidecarNic:
    Properties:
      GroupSet:
        - !Ref torqueSidecarSG
        - !Ref DefaultSandboxSG
      SubnetId: !Ref MngSubnet
    Type: 'AWS::EC2::NetworkInterface'
  torqueSidecarSG:
    Properties:
      GroupDescription: torqueSidecar Security Group
      SecurityGroupIngress:
        - IpProtocol: '-1'
          SourceSecurityGroupId: !Ref DefaultSandboxSG
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref torqueDebugServiceSG
          ToPort: 22
        - FromPort: 4000
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref torqueDebugServiceSG
          ToPort: 4000
      VpcId: !Ref VPC
    Type: 'AWS::EC2::SecurityGroup'