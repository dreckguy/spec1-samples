{
    "Description": "Imitation of Torque spec1 sandbox\n",
    "Resources": {
        "AppSubnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.0.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "app-subnet-0"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "AppSubnet0RouteAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "AppSubnet0"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "AppSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "app-subnet-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "AppSubnet1RouteAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "AppSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "DNS": {
            "Properties": {
                "HostedZoneConfig": {
                    "Comment": "hosted zone for sandbox: 2fg86qzvop02c2"
                },
                "Name": "2fg86qzvop02c2.sandbox.com",
                "VPCs": [
                    {
                        "VPCId": {
                            "Ref": "VPC"
                        },
                        "VPCRegion": {
                            "Ref": "AWS::Region"
                        }
                    }
                ]
            },
            "Type": "AWS::Route53::HostedZone"
        },
        "DNSRecordjavaspringwebsite": {
            "Properties": {
                "Comment": "DNS name for instance: java-spring-website.",
                "HostedZoneId": {
                    "Ref": "DNS"
                },
                "Name": "java-spring-website.2fg86qzvop02c2.sandbox.com",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "javaspringwebsiteNic",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "TTL": 20,
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "DefaultSandboxSG": {
            "Properties": {
                "GroupDescription": "Simply attaching the empty security group(DefaultSandboxSG) to an instance gives that instance permission to connect other instances",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "sandbox default security group"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "EmptyTG": {
            "Properties": {
                "Name": "TG2fg86qzvop02c2Empty",
                "Port": 1,
                "Protocol": "HTTP",
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "internet-gateway"
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "Listener8080": {
            "Properties": {
                "Certificates": [],
                "DefaultActions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "TG2fg86qzvop02c2H0aa79ec014"
                        },
                        "Type": "forward"
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "MainALB"
                },
                "Port": 8080,
                "Protocol": "HTTP"
            },
            "Type": "AWS::ElasticLoadBalancingV2::Listener"
        },
        "MainALB": {
            "DependsOn": "VpcInternetGatewayAttachment",
            "Properties": {
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "MainALBSG"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "AppSubnet0"
                    },
                    {
                        "Ref": "AppSubnet1"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
        },
        "MainALBSG": {
            "Properties": {
                "GroupDescription": "Attaching an empty security group to the ALB to give instances an access",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "public port access",
                        "FromPort": 8080,
                        "IpProtocol": "tcp",
                        "ToPort": 8080
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "MainALBSG"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "MngSubnet": {
            "Properties": {
                "CidrBlock": "10.0.3.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "mng-subnet"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "MngSubnetRouteAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "MngSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "public-route-table"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "RouteToInternet": {
            "DependsOn": "VpcInternetGatewayAttachment",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "TG2fg86qzvop02c2H0aa79ec014": {
            "Properties": {
                "Name": "TG2fg86qzvop02c2H0aa79ec014",
                "Port": 8080,
                "Protocol": "HTTP",
                "Tags": [
                    {
                        "Key": "torque-sandbox-id",
                        "Value": "2fg86qzvop02c2"
                    }
                ],
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": "60"
                    }
                ],
                "Targets": [
                    {
                        "Id": {
                            "Ref": "javaspringwebsite"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
        },
        "VPC": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "vpc"
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "VpcInternetGatewayAttachment": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "javaspringwebsite": {
            "DependsOn": [
                "DNSRecordjavaspringwebsite"
            ],
            "Properties": {
                "ImageId": "ami-f90a4880",
                "InstanceType": "t2.nano",
                "KeyName": "ophirus",
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": 0,
                        "NetworkInterfaceId": {
                            "Ref": "javaspringwebsiteNic"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "java-spring-website"
                    },
                    {
                        "Key": "torque-app-name",
                        "Value": "java-spring-website"
                    },
                    {
                        "Key": "torque-external-elb-dsn",
                        "Value": {
                            "Fn::GetAtt": [
                                "MainALB",
                                "DNSName"
                            ]
                        }
                    },
                    {
                        "Key": "torque-external-ports",
                        "Value": "java-spring-website:8080"
                    },
                    {
                        "Key": "torque-instance-logical-id",
                        "Value": "822396cdf14847fca9ca5ba776ce5c6f"
                    },
                    {
                        "Key": "torque-internal-ports",
                        "Value": "java-spring-website:8080"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/sh\n",
                                "apt-get update -y\n",
                                "apt-get install default-jdk -y\n",
                                "apt-get install tomcat8 -y\n",
                                "apt-get install tomcat8 -y\n",
                                "apt-get install tomcat8-admin -y\n",
                                "mkdir /home/artifacts\n",
                                "cd /home/artifacts || exit\n",
                                "git clone https://github.com/cloudshell-colony/sample_java_spring_source.git\n",
                                "mkdir /home/user/.config/colony-java-spring-sample -p\n",
                                "bash -c 'cat >> /home/user/.config/colony-java-spring-sample/app.properties' <<EOL\n",
                                "# Dadabase connection settings:\n",
                                "jdbc.url=jdbc:mysql://mysql.$DOMAIN_NAME:3306/$DB_NAME\n",
                                "jdbc.username=$DB_USER\n",
                                "jdbc.password=$DB_PASS\n",
                                "EOL\n",
                                "echo 'Deploy to TomCat'\n",
                                "rm -rf /var/lib/tomcat8/webapps/ROOT\n",
                                "cp sample_java_spring_source/artifacts/colony-java-spring-sample-1.0.0-BUILD-SNAPSHOT.war /var/lib/tomcat8/webapps/ROOT.war\n",
                                "systemctl start tomcat8\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "javaspringwebsiteNic": {
            "Properties": {
                "GroupSet": [
                    {
                        "Ref": "javaspringwebsiteSG"
                    },
                    {
                        "Ref": "DefaultSandboxSG"
                    }
                ],
                "SubnetId": {
                    "Ref": "AppSubnet0"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "javaspringwebsiteSG": {
            "Properties": {
                "GroupDescription": "java-spring-website Security Group",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [
                    
                   
                    {
                        "FromPort": 8080,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "MainALBSG"
                        },
                        "ToPort": 8080
                    },
                    {
                        "FromPort": 8080,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "DefaultSandboxSG"
                        },
                        "ToPort": 8080
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    }
}