{
    "Description": "Triggered By Torque (Blueprint: spec1-in-spec2, Owner: ophir.h@quali.com) - A Java Spring website deployed on a TomCat server and MySQL database\n",
    "Resources": {
        "AppSubnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.0.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "app-subnet-0"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "AppSubnet0RouteAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "AppSubnet0"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "AppSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "app-subnet-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "AppSubnet1RouteAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "AppSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "DNS": {
            "Properties": {
                "HostedZoneConfig": {
                    "Comment": "hosted zone for sandbox: 2rocayktk402c2"
                },
                "Name": "2rocayktk402c2.sandbox.com",
                "VPCs": [
                    {
                        "VPCId": {
                            "Ref": "VPC"
                        },
                        "VPCRegion": {
                            "Ref": "AWS::Region"
                        }
                    }
                ]
            },
            "Type": "AWS::Route53::HostedZone"
        },
        "DNSRecordjavaspringwebsite": {
            "Properties": {
                "Comment": "DNS name for instance: java-spring-website.",
                "HostedZoneId": {
                    "Ref": "DNS"
                },
                "Name": "java-spring-website.2rocayktk402c2.sandbox.com",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "javaspringwebsiteNic",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "TTL": 20,
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "DefaultSandboxSG": {
            "Properties": {
                "GroupDescription": "Simply attaching the empty security group(DefaultSandboxSG) to an instance gives that instance permission to connect other instances",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "sandbox default security group"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "EmptyTG": {
            "Properties": {
                "Name": "TG2rocayktk402c2Empty",
                "Port": 1,
                "Protocol": "HTTP",
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "internet-gateway"
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "MngSubnet": {
            "Properties": {
                "CidrBlock": "10.0.3.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "mng-subnet"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "MngSubnetRouteAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "MngSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "public-route-table"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "RouteToInternet": {
            "DependsOn": "VpcInternetGatewayAttachment",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "VPC": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "vpc"
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "VpcInternetGatewayAttachment": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "javaspringwebsite": {
            "DependsOn": [
                "DNSRecordjavaspringwebsite",
                "DNSRecordtorqueSidecar"
            ],
            "Properties": {
                "ImageId": "ami-f90a4880",
                "InstanceType": "t2.nano",
                "KeyName": "keypair-2rocayktk402c2",
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": 0,
                        "NetworkInterfaceId": {
                            "Ref": "javaspringwebsiteNic"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "java-spring-website"
                    },
                    {
                        "Key": "torque-app-name",
                        "Value": "java-spring-website"
                    },
                    {
                        "Key": "torque-instance-logical-id",
                        "Value": "bb82aa4b9ead4ddd813ed72cd2340616"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/sh\n",
                                "echo \"[cs18][$(date +\"%T.%3N\")] start of java-spring-website user-data\";\n",
                                "\nwhich wget > /dev/null;\nif [ $? -ne 0 ]; then\n    echo \"===== wget is not installed =====\";\nfi;\nwhich apt > /dev/null;\nif [ $? -ne 0 ]; then\n    echo \"===== apt is not installed =====\";\nfi;\nwhich yum > /dev/null;\nif [ $? -ne 0 ]; then\n    echo \"===== yum is not installed =====\";\nfi;\n\n",
                                "\n",
                                "if [ -f \"/etc/alpine-release\" ]; then \n",
                                " apk add coreutils;which wget > /dev/null; if [ $? -eq 0 ]; then ((wget --help | grep -q -e \"--recursive\") > /dev/null 2>&1 ||  apk add -q -f wget) ;else  apk add -q -f wget ;fi;\n",
                                "elif [ -f \"/etc/redhat-release\" ]; then \n",
                                "which wget > /dev/null || (yum install wget -y);\n",
                                "elif [ -f \"/etc/system-release\" ]; then \n",
                                "which wget > /dev/null || (yum install wget -y);\n",
                                "elif [ -f \"/etc/os-release\" ]; then \n",
                                "which wget > /dev/null || (apt-get update && apt-get -y install wget); sleep 5; which wget > /dev/null || (apt-get update && apt-get -y install wget);\n",
                                "elif [ -f \"/etc/lsb-release\" ]; then \n",
                                "which wget > /dev/null || (apt-get update && apt-get -y install wget); sleep 5; which wget > /dev/null || (apt-get update && apt-get -y install wget);\n",
                                "elif [ -f \"/etc/yum\" ]; then \n",
                                "which wget > /dev/null || (yum install wget -y);\n",
                                "fi;\n",
                                "\n",
                                "\n wget https://torque-production-public.s3-eu-central-1.amazonaws.com/helper/helper_v001.sh -T 5 -t 2 -O /usr/local/bin/torque.sh;\nchmod +x /usr/local/bin/torque.sh;\ntype torque.sh> /dev/null 2>&1 || echo \"torque.sh not found in PATH\";\necho \"export COLONY_SIDECAR_API=\"http://torqueSidecar.2rocayktk402c2.sandbox.com:4000/\"\" >> /etc/environment;\n            \n",
                                "echo \"[cs18][$(date +\"%T.%3N\")] going to check if sidecar api is ready\";\n",
                                "echo \"[$(date +\"%T.%3N\")] waiting for sidecar dns resolution\"; until DNS_RESOLUTION_RESULT=$(getent hosts torqueSidecar.2rocayktk402c2.sandbox.com) ; do echo \"[$(date +\"%T.%3N\")] sidecar dns not resolved, waiting ...\"; sleep 10; done;echo \"[$(date +\"%T.%3N\")] sidecar dns resolved!\"; echo \"$DNS_RESOLUTION_RESULT\" >> /etc/hosts;echo \"[$(date +\"%T.%3N\")] waiting for sidecar api\"; while [ 0 ]; do config_start_status=$(wget --tries=1 -T 10 -nv -O- torqueSidecar.2rocayktk402c2.sandbox.com:4000/ 2>&1); if [ \"$?\" -eq \"0\" ]; then echo \"[$(date +\"%T.%3N\")] sidecar api is ready\"; break; fi; echo \"[$(date +\"%T.%3N\")] sidecar api is not ready yet\";echo $config_start_status; sleep 10; done;\n",
                                "echo \"[cs18][$(date +\"%T.%3N\")] going to check if sidecar ftp is ready\";\n",
                                "echo \"fetching from sidecar text.txt..\"\nwhile true;do \nwget -T 15 -nH ftp://torqueSidecar.2rocayktk402c2.sandbox.com/text.txt -O /root/text.txt && break;\nsleep 1;\ndone;\n",
                                "echo \"fetching from sidecar 2rocayktk402c2_470565ff3a13444a9cb28f5a8015d204.userdata..\"\nwhile true;do \nwget -T 15 -nH ftp://torqueSidecar.2rocayktk402c2.sandbox.com/2rocayktk402c2_470565ff3a13444a9cb28f5a8015d204.userdata -O /root/2rocayktk402c2_470565ff3a13444a9cb28f5a8015d204.userdata && break;\nsleep 1;\ndone;\n",
                                "chmod +x /root/2rocayktk402c2_470565ff3a13444a9cb28f5a8015d204.userdata\n",
                                "/root/2rocayktk402c2_470565ff3a13444a9cb28f5a8015d204.userdata\n",
                                "echo \"[cs18][$(date +\"%T.%3N\")] end of java-spring-website user-data\";\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "javaspringwebsiteNic": {
            "Properties": {
                "GroupSet": [
                    {
                        "Ref": "javaspringwebsiteSG"
                    },
                    {
                        "Ref": "DefaultSandboxSG"
                    }
                ],
                "SubnetId": {
                    "Ref": "AppSubnet0"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "javaspringwebsiteSG": {
            "Properties": {
                "GroupDescription": "java-spring-website Security Group",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "SourceSecurityGroupId": {
                            "Ref": "torqueSidecarSG"
                        }
                    },
                    {
                        "FromPort": 22,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "torqueDebugServiceSG"
                        },
                        "ToPort": 22
                    },
                    {
                        "FromPort": 3389,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "torqueDebugServiceSG"
                        },
                        "ToPort": 3389
                    },
                    {
                        "IpProtocol": "-1",
                        "SourceSecurityGroupId": {
                            "Ref": "DefaultSandboxSG"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "torqueDebugService": {
            "Properties": {
                "IamInstanceProfile": "torque-instance-profile-1ba6c10d-fac8-48d5-97c3-8b14a20a50ba",
                "ImageId": "ami-047b1aebadba72929",
                "InstanceType": "t3.medium",
                "KeyName": "keypair-2rocayktk402c2",
                "SecurityGroupIds": [
                    {
                        "Ref": "torqueDebugServiceSG"
                    }
                ],
                "SubnetId": {
                    "Ref": "MngSubnet"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "torqueDebugService"
                    },
                    {
                        "Key": "torque-app-name",
                        "Value": "torqueDebugService"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo \"[cs18][$(date +\"%T.%3N\")] start of qualiY user-data\";\n",
                                "wget https://colony-qualiy-artifacts.s3.eu-west-2.amazonaws.com/versions/1_1_0/qualiy_userdata.sh\n",
                                "chmod +x qualiy_userdata.sh\n",
                                "sudo SIDECAR_API_URL=http://torqueSidecar.2rocayktk402c2.sandbox.com:4000 QUALIY_STATUS_UPDATER_URL=https://colony-qualiy-artifacts.s3.eu-west-2.amazonaws.com/versions/1_1_0/qualiy_status_updater.sh ./qualiy_userdata.sh aws_key_name=sandbox-2rocayktk402c2/keypair-2rocayktk402c2.pem aws_bucket_name=torque-1ba6c10d-fac8-48d5-97c3-8b14a20a50ba aws_region=eu-west-1 \n",
                                "echo \"[cs18][$(date +\"%T.%3N\")] disabling the apt auto-upgrades service\";\n",
                                "sed -i 's/Lists \"1\"/Lists \"0\"/' /etc/apt/apt.conf.d/20auto-upgrades\n",
                                "echo \"[cs18][$(date +\"%T.%3N\")] end of qualiY user-data.\";\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "torqueDebugServiceSG": {
            "Properties": {
                "GroupDescription": "torqueDebugService Security Group",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "public port access",
                        "FromPort": 8080,
                        "IpProtocol": "tcp",
                        "ToPort": 8080
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    }
}